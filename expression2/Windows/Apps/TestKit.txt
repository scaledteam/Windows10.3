@name TestKit
#Windows 10.3 update 6

if(appStart("APITest",vec2(300,150),ROM["System",table]["Theme",vector]*0.9,44)){ #Cost 5 egpID.
    if(appCreate()){print("Now you open TestApp! If you want see samples of API - welcome.")}
    if(romCreate()){romS("WriteTest","Success!")}
    if(appChoiceMenu(1,vec2(-150,-61),ROM["System",table]["Theme",vector]*0.5,"Activity",array("Buttons","Arrays","Texts","Slider","Activity1"))){print(appS("Mode"))} #Cost 3 egpID.
    if(activityManager(4)){switch(appS("Activity")){
        case "Buttons",
            if(activityGraphics()){
                appBox(4,vec2(150-25,50),vec2(40,40),vec(128)) #Cost 1 egpID.
                appWhiteText(5,4,"Gray",vec2(0,-12),8,1) #Cost 1 egpID.
                appBlackText(6,4,"Box",vec2(0,4),8,1) }else{ #Cost 1 egpID.
            
            if(egpInrange(egp(4))){Screen:egpColor(egp(4),vec(200)) if(appMouse()){print("You use API ",apiVersion())}}else{Screen:egpColor(egp(4),vec(128))}
            if(appButton(7,"Notify",      vec2(-25,-50),vec2(80,15))){DialogApp="TestApp DialogApp 1"} #Cost 3 egpID.
            if(appButton(10,"Action",     vec2(-25,-30),vec2(80,15))){DialogApp="TestApp DialogApp 2"} #Cost 3 egpID.
            if(appButton(13,"Input",      vec2(-25,-10),vec2(80,15))){DialogApp="TestApp DialogApp 3"} #Cost 3 egpID.
            if(appButton(16,"BigNotify",  vec2(-25, 10),vec2(80,15))){DialogApp="TestApp DialogApp 4"} #Cost 3 egpID.
            if(appButton(19,"FieldNotify",vec2(-25, 30),vec2(80,15))){DialogApp="TestApp DialogApp 5"} #Cost 3 egpID.
            if(appButton(41,"Choose",     vec2(-25, 50),vec2(80,15))){DialogApp="TestApp DialogApp 6"} #Cost 3 egpID.
            if(appEditTextString(22,"StringField",vec2(55,-50),60)){print(appS("StringField"))} #Cost 3 egpID.
            if(appEditTextNumber(25,"NumberField",vec2(55,-30),60)){print(appN("NumberField"))} #Cost 3 egpID.
            if(appButtonPress(28,"Button",vec2(55,-10),vec2(60,15))){print("ButtonWork!")} #Cost 3 egpID.
            if(appButton(31,"Click",vec2(55,10),vec2(60,15))){print("ButtonWork!")} #Cost 3 egpID.
            if(appButtonToggle(34,"Switcher",vec2(55,30),vec2(60,15),array("Switch1","Switch2","Switch3","Switch4"))){print("Switcher return "+appN("Switcher"))} #Cost 3 egpID.
            if(appCheckBox(37,"CheckBox","Check",vec2(25,45))){if(appN("CheckBox")){print("Checked!")}else{print("Not checked!")}} #Cost 4 egpID.
        } break
        case "Arrays",
            if(activityCreate()){
                local Array=appR("ArrayFieldIn")
                for(I=1,15){Array[I,string]+"String"+I}
                appR("ArrayFieldIn",Array)
            }
            
            appArrayField(4,"ArrayField",vec2(-15,4),vec2(110,130),appR("ArrayFieldIn")) #Cost 5 egpID
            appArrayFieldUseCTM(9,"ArrayFieldUseCTM",vec2(95,4),vec2(110,130),appR("ArrayFieldIn"),array("Action1","Action2")) #Cost 6 egpID
            
            switch(appN("ArrayFieldUseCTMAction")){
                case 1, print("Action1 "+appR("ArrayFieldIn")[appN("ArrayFieldUseCTM"),string]) break #Action1
                case 2, print("Action2 "+appR("ArrayFieldIn")[appN("ArrayFieldUseCTM"),string]) break #Action2
            } if(appN("ArrayFieldUseCTMAction")){appN("ArrayFieldUseCTMAction",0)}
        break
        case "Texts",
            if(activityGraphics()){
                appUniText(4,("This is long text function (appUniText). If you have long text - use shortArray(230/textSizeX(10)). You can use this for arrays and strings. "+ #Cost 1 EGPID
                "If you want make simple text, you can use appWhiteText, appBlackText and appUniText. Uni - universal color."):shortArray(230/textSizeX(8)),vec2(-150+85,-60),8) 
            }
            
            #Actions of Texts page. Here place is empty, because this page have static text, and do nothink.
        break
        case "Slider",
            if(activityGraphics()){
                appUniText(4,"Static",vec2(-30,-60),10,1)
                appUniText(5,"Dynamic",vec2(60,-60),10,1)
                appBox(6,vec2(-30,-20),vec2(40),vec(appN("Slider1")))
                appBox(7,vec2( 60,-20),vec2(40),vec(appN("Slider2")))
            }
            if(appSliderStatic( 8,"Slider1",vec2(-60,10),50,0,255)){Screen:egpColor(egp(6),vec(appN("Slider1")))}
            if(appSliderDynamic(11,"Slider2",vec2( 30,10),50,0,255)){Screen:egpColor(egp(7),vec(appN("Slider2")))}
            if(click()){
                if(egpInrange(egp(6))){appN("Slider1",0) Screen:egpColor(egp(6),vec())}
                if(egpInrange(egp(7))){appN("Slider2",0) Screen:egpColor(egp(7),vec())}
            }
        break
        case "Activity1",
            if(activityGraphics()){
                appUniText(4,"This is Activity1",vec2(40,-20),10,1)
            }else{
            if(appButton(5,"Go to Activity2",vec2(40,0),vec2(100,15))){appS("Activity","Activity2")} #Cost 3 egpID.
            
        } break
        case "Activity2",
            if(activityGraphics()){
                appUniText(4,array("This is Activity2"):add("This is new method - activities. Try this method on programming!":shortArray(230/textSizeX(10))),vec2(-60,-55))
                appN("CheckTested",romN("Tested"))
            }else{
            if(appButton(5,"Go back",vec2(-25,30),vec2(80,15))){appS("Activity","Activity1")} #Cost 3 egpID.
            if(appCheckBox(8,"CheckTested","I tested new OS!",vec2(85-150,45))){romN("Tested",appN("CheckTested"))} #Cost 4 egpID.
            
        } break
        
    }}
    if(DialogApp){
        if(dialogApp("TestApp DialogApp 1","Notify",10,"I'm dialog app!")){print("Action after press OK button")}
        if(dialogApp("TestApp DialogApp 2","Action",10,"I'm dialog app!")){print("Action of dialog app!")}
        if(dialogApp("TestApp DialogApp 3","Input",10,"I'm dialog app!")){print(glbS("DialogApp","OutText"))}
           dialogApp("TestApp DialogApp 4","BigNotify",10,"I'm big dialog app! This is a big notification! If you have long message, you can use this method! If you want use array, you need toString() method of somethink same.")
           dialogApp("TestApp DialogApp 5","FieldNotify",40,"I'm big dialog app! This is a big notification! If you have long message, you can use this method! If you want use array, you need toString() method of somethink same.")  }
        if(dialogApp("TestApp DialogApp 6","Choose",10,array("Choice1","Choice2","Choice3","Choice4"):concat("\n"))){print(glbS("DialogApp","OutText"))}
    
appEnd()}



if(appStart("PerfTest",vec2(200,150),vec(180,80,180),10)){
    if(appGraphics()){
        appWhiteText(1,"Test your PC!",vec2(-90,-60))
        appWhiteText(2,"Ops: "+ops(),vec2(-90,-50))
        appWhiteText(3,array(
            "Maximum of",
            "    EGPIDs: "+egpMaxObjects(),
            "    Umsg/sec: "+egpMaxUmsgPerSecond(),
            "Quota",
            "    Hard: "+hardQuota(),
            "    Soft: "+softQuota(),
            "    Max: "+maxquota(),
            "    Min: "+minquota()),vec2(-90,-30))
    }else{
    appSliderStatic(4,"Perf",vec2(-90,-35),100,0,110)
    appButtonToggle(7,"Start",vec2(70,60),vec2(40,15),array("Start","Stop"))
    Screen:egpSetText(egp(2),"Ops: "+ops())
    if(appN("Start")){
        CPUTestPerf=appN("Perf")
        if(CPUTestPerf>100){ 
            CPUTestSpeed=0 while(perf()){CPUTestSpeed++}
            Screen:egpSetText(egp(1),"Speed: "+CPUTestSpeed+" Op/Tick")
        }else{
            CPUTestSpeed=0 while(perf(CPUTestPerf)){CPUTestSpeed++}
            Screen:egpSetText(egp(1),"Speed: "+CPUTestSpeed+" Op/Tick")
        }
    }
    
} appEnd()}



if(appStart("TableCMD",vec2(300,150),vec(90,90,180),35)){
    if(appCreate()){
        romCreate()
        appN("LevelL",0) appN("LevelR",0)
         local Table=table()
            #Table["ROM",table]=ROM["Apps",table]
            Table["ROM",table]=ROM["Apps",table]
            Table["RAM",table]=App
            Table["System",table]=ROM["System",table]
            Table["My files",table]=ROM["Apps",table][ThisApp,table]
        appT("FieldL"+appN("LvlL"),Table) appT("FieldR"+appN("LvlR"),Table)
        
        appR("FieldLShow",appT("FieldL"+appN("LvlL")):arrayMtoStringArray(appV2("Size"):x()/2/textSizeX(10)))
        appR("FieldRShow",appT("FieldR"+appN("LvlR")):arrayMtoStringArray(appV2("Size"):x()/2/textSizeX(10)))
    }else{
    if(appGraphics()){
        Screen:egpSetText(egp(-1),"TableCommander")
    }else{
    
    appChat()
    
    if(appSize(32,vec2(200,100),vec2(300,150))){
        Screen:egpRemove(egp(2)) Screen:egpRemove(egp(2+2))
        Screen:egpRemove(egp(8)) Screen:egpRemove(egp(8+2))
        for(I=0,5){Screen:egpRemove(egp(14+I*3))}
    }
    
    if(appTimer(1000)){Update="TableCMD FieldL"}
    if(appTimer(1000)){Update="TableCMD FieldR"}
    
    local Size=appV2("Size")
    
    if(Update=="TableCMD FieldL"){
        appR("FieldLShow",appT("FieldL"+appN("LvlL")):arrayMtoStringArray(Size:x()/2/textSizeX(10)))
    }
    
    if(Update=="TableCMD FieldR"){
        appR("FieldRShow",appT("FieldR"+appN("LvlR")):arrayMtoStringArray(Size:x()/2/textSizeX(10)))
    }
    
    appArrayFieldUse(2,"FieldL",Size*vec2(-0.25,0),Size*vec2(0.5,1)-vec2(0,30),array("<Back"):add(appR("FieldLShow")))
    
    appArrayFieldUse(8,"FieldR",Size*vec2(0.25,0),Size*vec2(0.5,1)-vec2(0,30),array("<Back"):add(appR("FieldRShow")))
    
    if(appClick()){
        if(egpInrange(egp(2))){appS("Focus","L") Screen:egpAlpha(egp(8+5),0)}
        if(egpInrange(egp(8))){appS("Focus","R") Screen:egpAlpha(egp(2+5),0)}
        
        local F=appS("Focus")
        local Lvl=appN("Lvl"+F)
        
        local Choice=appT("Field"+F+Lvl):keys()[appN("Field"+F)-1,string]
        if(!appN("Pick")&appT("Field"+F+Lvl):typeids()[Choice,string]=="t"){
            appT("Field"+F+(Lvl+1):toString(),appT("Field"+F+Lvl)[Choice,table])
            appN("Lvl"+F,Lvl+1) 
            
            appN("Field"+F,0)
            Screen:egpAlpha(egp(2+5),0)
            Screen:egpAlpha(egp(8+5),0)
            Update="TableCMD Field"+F
        }
        
        elseif(appN("Field"+F)==1&Lvl>0){
            appN("Lvl"+F,Lvl-1) 
            
            appN("Field"+F,0)
            Screen:egpAlpha(egp(2+5),0)
            Screen:egpAlpha(egp(8+5),0)
            Update="TableCMD Field"+F
        }
    }
    
    local F=appS("Focus")
    local Lvl=appN("Lvl"+F)
    local ButtonPos=array()
    local Choice=appT("Field"+F+Lvl):keys()[appN("Field"+F)-1,string]
    
    for(I=0,5){
        ButtonPos[I+1,vector2]=vec2(Size:x()*I/6+Size:x()/12-Size:x()/2,Size:y()/2-7.5)
    }
    
    if(appButton(14,"Add",ButtonPos[1,vector2],vec2(Size:x()/6,15),vec(90,90,180))){
        DialogApp="TableCMD Add"
    }
    
    if(appButton(17,"Edit",ButtonPos[2,vector2],vec2(Size:x()/6,15),vec(90,90,180))){
        DialogApp="TableCMD Edit"
    }
    
    if(appButtonToggle(20,"Pick",ButtonPos[3,vector2],vec2(Size:x()/6,15),vec(90,90,180),array("Pick","Norm"))){
        appN("Field"+F,0)
        Screen:egpAlpha(egp(2+5),0)
        Screen:egpAlpha(egp(8+5),0)
    }
    
    if(appButton(23,"Move",ButtonPos[4,vector2],vec2(Size:x()/6,15),vec(90,90,180))){
        local F2="U" if(F=="L"){F2="R"}elseif(F=="R"){F2="L"}
        local Lvl2=appN("Lvl"+F2)
        local Target=appT("Field"+F2+Lvl2)
        switch(appT("Field"+F+Lvl):typeids()[Choice,string]){
            case "n", Target[Choice,number] = appT("Field"+F+Lvl)[Choice,number] break
            case "s", Target[Choice,string] = appT("Field"+F+Lvl)[Choice,string] break
            case "v", Target[Choice,vector] = appT("Field"+F+Lvl)[Choice,vector] break
            case "xv2", Target[Choice,vector2] = appT("Field"+F+Lvl)[Choice,vector2] break
            case "xv4", Target[Choice,vector4] = appT("Field"+F+Lvl)[Choice,vector4] break
            case "e", Target[Choice,entity]= appT("Field"+F+Lvl)[Choice,entity] break
            case "a", Target[Choice,angle] = appT("Field"+F+Lvl)[Choice,angle] break
            case "r", Target[Choice,array] = appT("Field"+F+Lvl)[Choice,array] break
            case "t", Target[Choice,table] = appT("Field"+F+Lvl)[Choice,table] break
            default, DialogApp="TableCMD Can't move" break
        }
        appT("Field"+F+Lvl):remove(Choice)
    }
    
    if(appButton(26,"Copy",ButtonPos[5,vector2],vec2(Size:x()/6,15),vec(90,90,180))){
        local F2="U" if(F=="L"){F2="R"}elseif(F=="R"){F2="L"}
        local Lvl2=appN("Lvl"+F2)
        local Target=appT("Field"+F2+Lvl2)
        switch(appT("Field"+F+Lvl):typeids()[Choice,string]){
            case "n", Target[Choice,number] = appT("Field"+F+Lvl)[Choice,number] break
            case "s", Target[Choice,string] = appT("Field"+F+Lvl)[Choice,string] break
            case "v", Target[Choice,vector] = appT("Field"+F+Lvl)[Choice,vector] break
            case "xv2", Target[Choice,vector2] = appT("Field"+F+Lvl)[Choice,vector2] break
            case "xv4", Target[Choice,vector4] = appT("Field"+F+Lvl)[Choice,vector4] break
            case "e", Target[Choice,entity]= appT("Field"+F+Lvl)[Choice,entity] break
            case "a", Target[Choice,angle] = appT("Field"+F+Lvl)[Choice,angle] break
            case "r", Target[Choice,array] = appT("Field"+F+Lvl)[Choice,array]:clone() break
            case "t", Target[Choice,table] = appT("Field"+F+Lvl)[Choice,table]:clone() break
            default, DialogApp="TableCMD Can't copy" break
        }
    }
    
    if(appButton(29,"Delete",ButtonPos[6,vector2],vec2(Size:x()/6,15),vec(90,90,180))){
        appT("Field"+F+Lvl):remove(Choice) Update="TableCMD FieldL"
    }
    
    
    if(dialogApp("TableCMD Add","Choose",60,array("number","string","vector","vector2","vector4","entity","angle","table","numberArray","stringArray"):concat("\n"))){
        appS("Type",glbS("DialogApp","OutText"))
        appN("TableCMDAdd2",1)
    }elseif(appN("TableCMDAdd2")){
        DialogApp="TableCMD Add2"
        appN("TableCMDAdd2",0)
    }
    
    if(dialogApp("TableCMD Add2","Input",10,"Enter name:")){
        appS("Name",glbS("DialogApp","OutText"))
        appN("TableCMDAdd3",1)
    }elseif(appN("TableCMDAdd3")){
        DialogApp="TableCMD Add3"
        appN("TableCMDAdd3",0)
    }
    
    if(dialogApp("TableCMD Edit","Choose",60,array("number","string","vector","vector2","vector4","entity","angle","table","numberArray","stringArray"):concat("\n"))){
        appS("Type",glbS("DialogApp","OutText"))
        appS("Name",Choice)
        appN("TableCMDEdit",1)
        if(appS("Type")=="numberArray"|appS("Type")=="stringArray"){SysText=appT("Field"+F+Lvl)[appS("Name"),array]:concat(",")}
    }elseif(appN("TableCMDEdit")){
        DialogApp="TableCMD Add3"
        appN("TableCMDEdit",0)
    }
    
    if(DialogApp){
        dialogApp("TableCMD Can't copy","Notify",10,"Can't copy value.")
        dialogApp("TableCMD Can't move","Notify",10,"Can't move value.")
        
        if(dialogApp("TableCMD Add3","Input",8,"Enter data: (Use ',' for explode)")){
            local Paste=appT("Field"+F+Lvl)
            local Explode=glbS("DialogApp","OutText"):explode(",")
            if(appS("Name")!=""){switch(appS("Type")){
                case "number",  Paste[appS("Name"),number]=glbS("DialogApp","OutText"):toNumber() break
                case "string",  Paste[appS("Name"),string]=glbS("DialogApp","OutText") break
                case "vector",  Paste[appS("Name"),vector]=vec(Explode[1,string]:toNumber(),Explode[2,string]:toNumber(),Explode[3,string]:toNumber()) break
                case "vector2", Paste[appS("Name"),vector2]=vec2(Explode[1,string]:toNumber(),Explode[2,string]:toNumber()) break
                case "vector4", Paste[appS("Name"),vector4]=vec4(Explode[1,string]:toNumber(),Explode[2,string]:toNumber(),Explode[3,string]:toNumber(),Explode[4,string]:toNumber()) break
                case "angle",   Paste[appS("Name"),angle]=ang(Explode[1,string]:toNumber(),Explode[2,string]:toNumber(),Explode[3,string]:toNumber()) break
                case "entity",  Paste[appS("Name"),entity]=entity(glbS("DialogApp","OutText"):toNumber()) break
                case "table",   Paste[appS("Name"),table]=table() break
                case "numberArray", foreach(I,N:string=Explode){Explode[I,number]=N:toNumber()} Paste[appS("Name"),array]=Explode break
                case "stringArray", Paste[appS("Name"),array]=Explode break
            }}
            appT("Field"+F+Lvl,Paste)
            Update="TableCMD Field"+F
        }
    }
    
}} appEnd()}
